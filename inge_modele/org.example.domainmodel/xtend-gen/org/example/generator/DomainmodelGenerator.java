/**
 * generated by Xtext 2.14.0
 */
package org.example.generator;

import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.example.domainmodel.Instruction;
import org.example.domainmodel.InstructionMove;
import org.example.domainmodel.InstructionWait;
import org.example.domainmodel.StartPoint;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class DomainmodelGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<StartPoint> _filter = Iterables.<StartPoint>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), StartPoint.class);
    for (final StartPoint e : _filter) {
      fsa.generateFile(
        "ExampleMixingMachine.java", 
        this.compile(e));
    }
  }
  
  public CharSequence compile(final StartPoint e) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t");
    _builder.append("package fr.uha.ensisa.idm.mixin.example;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("import fr.uha.ensisa.idm.mixin.sim.svg.SVGMixingMachine;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public class ExampleMixingMachine extends SVGMixingMachine {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("final static int MAX_POS = 11;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("final static int LGATE_POS = 4;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("final static int RGATE_POS = 11;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static int currentPos = 5;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static final int RESERVOIR_POS = 4;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static final int DRAIN_POS = 5;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static final int MAX_CAPACITY = 30;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static boolean lDoorOpened = false;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static boolean rDoorOpened = false;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int run() {");
    _builder.newLine();
    {
      EList<Instruction> _instructions = e.getInstructions();
      for(final Instruction i : _instructions) {
        _builder.append("\t\t");
        CharSequence _compile = this.compile(i);
        _builder.append(_compile, "\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.append("return 0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void absoluteMove(int absolute){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(absolute > MAX_POS || absolute < 1){");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("throw new IllegalStateException(\"Position incorrecte\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int offset = absolute - currentPos;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("openGates(absolute);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("move(offset);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("currentPos = absolute;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("closeGates();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void openGates(int dest){");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (!lDoorOpened &&");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("(currentPos < LGATE_POS && dest >= LGATE_POS ||");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("dest < LGATE_POS && currentPos >= LGATE_POS)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("){");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("open(0);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("lDoorOpened = true;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if ( !rDoorOpened &&");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("(currentPos < RGATE_POS && dest >= RGATE_POS ||");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("dest < RGATE_POS && currentPos >= RGATE_POS)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("open(1);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("rDoorOpened = true;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void closeGates(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (lDoorOpened && currentPos >= LGATE_POS){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("shut(0);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("lDoorOpened = false;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (rDoorOpened && currentPos < RGATE_POS ){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("shut(1);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("rDoorOpened = false;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void cleanup(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("filt(0);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("absoluteMove( RESERVOIR_POS );");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("suck(MAX_CAPACITY);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("absoluteMove(DRAIN_POS);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("blow(MAX_CAPACITY);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main(String[] args) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ExampleMixingMachine main = new ExampleMixingMachine();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (int i = 1; i <= main.getInputCups(); ++i) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("main.setAtInputCup(i, 9);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("main.run();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}\t\t");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Instruction i) {
    CharSequence _switchResult = null;
    boolean _matched = false;
    if (i instanceof InstructionMove) {
      _matched=true;
      _switchResult = this.compile(((InstructionMove) i));
    }
    if (!_matched) {
      if (i instanceof InstructionWait) {
        _matched=true;
        _switchResult = this.compile(((InstructionWait) i));
      }
    }
    return _switchResult;
  }
  
  public CharSequence compile(final InstructionMove im) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("absoluteMove(");
    int _from = im.getFrom();
    _builder.append(_from);
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("filt(");
    int _filter = im.getFilter();
    _builder.append(_filter);
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("suck(");
    int _qty = im.getQty();
    _builder.append(_qty);
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("absoluteMove(");
    int _to = im.getTo();
    _builder.append(_to);
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("filt(0);");
    _builder.newLine();
    _builder.append("blow(");
    int _qty_1 = im.getQty();
    _builder.append(_qty_1);
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("cleanup();");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final InstructionWait iw) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("wait(");
    int _tps = iw.getTps();
    _builder.append(_tps);
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
}
