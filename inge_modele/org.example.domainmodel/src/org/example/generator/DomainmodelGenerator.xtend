/*
 * generated by Xtext 2.14.0
 */
package org.example.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.example.domainmodel.Instruction
import org.example.domainmodel.InstructionMove
import org.example.domainmodel.InstructionWait
import org.example.domainmodel.StartPoint

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */

 
class DomainmodelGenerator extends AbstractGenerator {
 	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (e : resource.allContents.toIterable.filter(StartPoint)) {
                fsa.generateFile(
                	"ExampleMixingMachine.java",
                	e.compile
                )
        }
	}
	
	def compile (StartPoint e)'''
		package fr.uha.ensisa.idm.mixin.example;
		
		import fr.uha.ensisa.idm.mixin.sim.svg.SVGMixingMachine;
		
		public class ExampleMixingMachine extends SVGMixingMachine {
		
		final static int MAX_POS = 11;
		final static int LGATE_POS = 4;
		final static int RGATE_POS = 11;
		private static int currentPos = 5;
		static final int RESERVOIR_POS = 4;
		static final int DRAIN_POS = 5;
		static final int MAX_CAPACITY = 30;
		
		private static boolean lDoorOpened = false;
		private static boolean rDoorOpened = false;
		
		public int run() {
			«FOR i:e.instructions»
				«i.compile»
			«ENDFOR»
			return 0;
		}
			
		private void absoluteMove(int absolute){
			if(absolute > MAX_POS || absolute < 1){
					throw new IllegalStateException("Position incorrecte");
			}
			int offset = absolute - currentPos;
			openGates(absolute);
			move(offset);
			currentPos = absolute;
			closeGates();
		}
				
		private void openGates(int dest){
		
			if (!lDoorOpened &&
					(currentPos < LGATE_POS && dest >= LGATE_POS ||
					dest < LGATE_POS && currentPos >= LGATE_POS)
			){
	
				open(0);
				lDoorOpened = true;
			}
	
			if ( !rDoorOpened &&
					(currentPos < RGATE_POS && dest >= RGATE_POS ||
					dest < RGATE_POS && currentPos >= RGATE_POS)
			){
				open(1);
				rDoorOpened = true;
			}
		
		}
		
		private void closeGates(){
			if (lDoorOpened && currentPos >= LGATE_POS){
				shut(0);
				lDoorOpened = false;
			}
	
			if (rDoorOpened && currentPos < RGATE_POS ){
				shut(1);
				rDoorOpened = false;
			}
		}
		
			
		private void cleanup(){
			filt(0);
			absoluteMove( RESERVOIR_POS );
			suck(MAX_CAPACITY);
			absoluteMove(DRAIN_POS);
			blow(MAX_CAPACITY);
		}
		
		public static void main(String[] args) {
			ExampleMixingMachine main = new ExampleMixingMachine();
			for (int i = 1; i <= main.getInputCups(); ++i) {
				main.setAtInputCup(i, 9);
			}
			main.run();
		}
	}		
	'''
	
	def compile (Instruction i) {
		return switch i {
				InstructionMove: (i as InstructionMove).compile
				InstructionWait: (i as InstructionWait).compile	
			}
		}
		
	def compile (InstructionMove im) '''
		absoluteMove(«im.from»);
		filt(«im.filter»);
		suck(«im.qty»);
		absoluteMove(«im.to»);
		filt(0);
		blow(«im.qty»);
		cleanup();
	'''
	
	def compile (InstructionWait iw) '''
		wait(«iw.tps»);
	'''
/* 
	def compile (Class c) '''
		«IF c.eContainer.fullyQualifiedName !== null»
		package «c.eContainer.fullyQualifiedName»;
		«ENDIF»
		
		public class «c.name» «IF c.superType !== null» extends «c.superType.fullyQualifiedName» «ENDIF» {
			«FOR f:c.features»
				«f.compile»
			«ENDFOR»
		}
	'''
	
	def compile(Feature f)'''
		private «f.type.fullyQualifiedName» «f.name»;
		
		public «f.type.fullyQualifiedName» get«f.name.toFirstUpper»() {
			return «f.name»;
		}
		
		public void set«f.name.toFirstUpper»(«f.type.fullyQualifiedName» «f.name») {
			this.«f.name» = «f.name»;
		}
	'''
	* 
	* 
*/
}
