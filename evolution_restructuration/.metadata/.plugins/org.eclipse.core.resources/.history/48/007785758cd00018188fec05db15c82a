import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.TreeSet;

import org.eclipse.jdt.core.dom.AST;
import org.eclipse.jdt.core.dom.ASTNode;
import org.eclipse.jdt.core.dom.ASTParser;
import org.eclipse.jdt.core.dom.ASTVisitor;
import org.eclipse.jdt.core.dom.CompilationUnit;
import org.eclipse.jdt.core.dom.FieldDeclaration;
import org.eclipse.jdt.core.dom.MethodDeclaration;
import org.eclipse.jdt.core.dom.PackageDeclaration;
import org.eclipse.jdt.core.dom.SimpleName;
import org.eclipse.jdt.core.dom.TypeDeclaration;

public class Main
{
	final static int PERCENT = 20;
	final static String PATH = "/auto_home/achaillot/workspace/JapScanDownloader/src";
	
	final static int X = 2;
	
	static int classCounter = 0;
	static int lineCounter = 0;
	static int methodCounter = 0;
	static int packageCounter = 0;
	
	static int methodAverage = 0;
	static int codeLineMethodAverage = 0;
	static int attributeAverage = 0;
	
	static List<String> percentClassWithManyMethods = new ArrayList<String>();
	static List<String> percentClassWithManyAttributes = new ArrayList<String>();

	static Collection<String> classWithManyMethodsAndAttributes = new ArrayList<String>();
	
	static Collection<String> classWithMoreThanXMethods = new ArrayList<String>();
	static Collection<String> percentClassWithLargestCode = new ArrayList<String>();
	
	static int maximumMethodParameter = 0;
	
	//Temp
	
	static TreeSet<SetType> classWithManyMethods = new TreeSet<SetType>();
	static TreeSet<SetType> classWithManyAttributes = new TreeSet<SetType>();
	static TreeSet<SetType> classWithLargestCode = new TreeSet<SetType>();
	
	static int attributeCounter = 0;
	static TreeSet<String> packages = new TreeSet<String>();
	static int methodLineCounter = 0;
			
	public static String fileToString(String filePath) throws IOException
	{
		StringBuilder fileCode = new StringBuilder(1000);
		BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath));

		char[] buffer = new char[10];
		int numRead = 0;
		while((numRead = bufferedReader.read(buffer)) != -1)
		{
			String readData = String.valueOf(buffer, 0, numRead);
			fileCode.append(readData);
			buffer = new char[1024];
		}

		bufferedReader.close();

		return fileCode.toString();
	}

	public static void directoryToString(String directoryPath) throws IOException
	{
		File root = new File(directoryPath);

		for(File file : root.listFiles())
			if(file.isDirectory())
				directoryToString(file.getAbsolutePath());
			else
				parse(fileToString(file.getAbsolutePath()));
		
	}
	
	public static void parse(String code) throws IOException
	{
		ASTParser astParser = ASTParser.newParser(AST.JLS3);


		astParser.setSource(code.toCharArray());

		astParser.setKind(ASTParser.K_COMPILATION_UNIT);

		final CompilationUnit compilationUnit = (CompilationUnit) astParser.createAST(null);
		compilationUnit.accept(new ASTVisitor()
		{
		
			public boolean visit (PackageDeclaration node){
				packages.add(node.getName().toString());
				packageCounter++;	
				return true;
			}
			
			public boolean visit (TypeDeclaration node)
			{
				SimpleName className = node.getName();

				System.out.println("Class :  " + className.toString() + " - " + node.modifiers());
				
				int localLineCounter = node.toString().length() - node.toString().replace(System.getProperty("line.separator"), "").length();
				
				if(localLineCounter == 0)
					localLineCounter += node.toString().length() - node.toString().replace("\n", "").length();

				lineCounter += localLineCounter;
				classCounter++;
						
				System.out.println("Superclass : ");
				for(Object object : node.superInterfaceTypes())
					System.out.println(object);

				System.out.println("---");

				for(FieldDeclaration fieldDeclaration : node.getFields())
					System.out.println(
						fieldDeclaration.fragments().get(0) + " - " + fieldDeclaration.modifiers().toString());
				attributeCounter += node.getFields().length;
				
				classWithManyAttributes.add(new  SetType(className.toString(), node.getFields().length));

				System.out.println("---");
				
				
				for(MethodDeclaration methodDeclaration : node.getMethods())
				{
					System.out.println(methodDeclaration.getName() + " - " + methodDeclaration.getReturnType2()
						+ " - " + methodDeclaration.parameters());
					
					if(methodDeclaration.parameters().size() > maximumMethodParameter)
						maximumMethodParameter = methodDeclaration.parameters().size();
					
					localLineCounter = methodDeclaration.getBody().toString().length() - methodDeclaration.getBody().toString().replace(System.getProperty("line.separator"), "").length();
					
					if(localLineCounter == 0)
						localLineCounter += methodDeclaration.getBody().toString().length() - methodDeclaration.getBody().toString().replace("\n", "").length();

					methodLineCounter += localLineCounter;
				}
				
				if(node.getMethods().length > X)
					classWithMoreThanXMethods.add(className.toString());
				
				classWithManyMethods.add(new SetType(className.toString(), node.getMethods().length));
				
				methodCounter += node.getMethods().length;

				return true;
			}
			
		});		
	}

	public static void percentOfClassWithManyMethods(){
		int numberToSelect = (classCounter * PERCENT) / 100;	
		int cpt = 0;
		
		for(SetType it : classWithManyMethods){
			if(cpt != numberToSelect){
				percentClassWithManyMethods.add(it.getValue());	
				cpt++;
			}
			else{
				return;
			}
		}
	}
	
	public static void percentOfClassWithManyAttributs(){
		int numberToSelect = (classCounter * PERCENT) / 100;	
		int cpt = 0;
		
		for(SetType it : classWithManyAttributes){
			if(cpt != numberToSelect){
				percentClassWithManyAttributes.add(it.getValue());	
				cpt++;
			}
			else{
				return;
			}
		}
	}
	
	public static void mergeBetweenClassWithManyAttributesAndMethods(){
		for(String cMethods: percentClassWithManyMethods){
			for(String cAttributes: percentClassWithManyAttributes){
				if(cMethods.equals(cAttributes)){
					classWithManyMethodsAndAttributes.add(cMethods.toString());
				}
			}
		}
	}
	
	public static void main(String[] args) throws IOException {
		
		directoryToString(PATH);
		percentOfClassWithManyMethods();
		percentOfClassWithManyAttributs();
		mergeBetweenClassWithManyAttributesAndMethods();
		
		System.out.println(System.getProperty("line.separator"));
		System.out.println("--- Result --- ");
		System.out.println(System.getProperty("line.separator"));
		
		System.out.println("classCounter : " + classCounter);
		System.out.println("lineCounter : " + lineCounter);
		System.out.println("methodCounter : " + methodCounter);
		System.out.println("packageCounter : " + packageCounter);
		
		System.out.println("codeLineMethodAverage : " + methodLineCounter / methodCounter); //codeLineMethodAverage
		System.out.println("attributeAverage : " + attributeCounter / classCounter); //attributeAverage
	
		System.out.println(PERCENT + "% of class with many Methods : " + percentClassWithManyMethods.toString());
		System.out.println(PERCENT + "% of class with many Attributes : " + percentClassWithManyAttributes.toString());
		
		System.out.println("classWithManyMethodsAndAttributes : " + classWithManyMethodsAndAttributes.toString());
		
		System.out.println("classWithMoreThanXMethods : " + classWithMoreThanXMethods.toString());
		System.out.println("classWithLargestCode : " + classWithLargestCode.toString());
		
		System.out.println("maximumMethodParameter : " + maximumMethodParameter);
	}
}